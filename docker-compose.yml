networks:
  dev:
    driver: bridge

volumes:
  account_pgdata:
    driver: local
  keycloak_pgdata:
    driver: local
  subscriptions_pgdata:
    driver: local
  azurite_data:
    driver: local
    
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - dev

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:  
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "email-send:1:1, stripe-webhooks:1:1" 
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - dev
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 5s
      timeout: 10s
      retries: 5

  account_database:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: LRA
    ports:
      - "5432:5432"
    volumes:
      - account_pgdata:/var/lib/postgresql/data
    networks:
      - dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d LRA"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  keycloak_database:
    image: postgres:latest
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    ports:
      - "5433:5432"
    volumes:
      - keycloak_pgdata:/var/lib/postgresql/data
    networks:
      - dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  subscriptions_database:
    image: postgres:latest
    environment:
      POSTGRES_USER: subscriptions
      POSTGRES_PASSWORD: subscriptions
      POSTGRES_DB: subscriptions
    ports:
      - "5434:5432"
    volumes:
      - subscriptions_pgdata:/var/lib/postgresql/data
    networks:
      - dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U subscriptions -d subscriptions" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:  
      - azurite_data:/data
    command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose --skipApiVersionCheck"
    restart: unless-stopped
    networks:
      - dev
    
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak_database:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_HOSTNAME: http://localhost:8082
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_OPTS: "-Dkeycloak.import=/opt/keycloak/imports/create-superadmin.cli"
    volumes:
      - ./keycloak/imports:/opt/keycloak/imports
    ports:
      - "8082:8080" 
    depends_on:
      keycloak_database:
        condition: service_healthy
    networks:
      - dev
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080 || exit 0"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s
    command: start-dev
    
  account_presentation:
    build:
      context: .
      dockerfile: LRA.Account.Presentation/Dockerfile
    ports:  
      - "8081:8081"
    environment:
      - ASPNETCORE_URLS=http://+:8081
      - Kafka__BootstrapServers=kafka:29092
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      account_database:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - dev
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      start_period: 10s
      
  subscriptions_presentation:
    build:
      context: .
      dockerfile: LRA.Subscriptions.Presentation/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - ASPNETCORE_URLS=http://+:8084
      - ConnectionStrings__Database=Host=subscriptions_database;Port=5432;Database=subscriptions;Username=subscriptions;Password=subscriptions
      - Kafka__BootstrapServers=kafka:29092
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      subscriptions_database:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - dev
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  email_service:
    build:
      context: .
      dockerfile: LRA.Email/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Kafka__BootstrapServers=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      account_presentation:
        condition: service_healthy
    networks:
      - dev
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  gateways_client:
    build:
      context: .
      dockerfile: LRA.Gateways.Client/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080 
      - Kafka__BootstrapServers=localhost:9092
      - Kafka__BootstrapServers=kafka:29092
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      kafka:
        condition: service_healthy
      subscriptions_presentation:
        condition: service_started
      account_presentation:
        condition: service_started
      keycloak:
        condition: service_healthy 
    networks:
      - dev
        
  gateways_admin:
    build:
      context: .
      dockerfile: LRA.Gateways.Admin/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - ASPNETCORE_URLS=http://+:8086
      - Kafka__BootstrapServers=localhost:9092
      - Kafka__BootstrapServers=kafka:29092
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      account_presentation:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - dev

  gateways_services:
    build:
      context: .
      dockerfile: LRA.Gateways.Services/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - ASPNETCORE_URLS=http://+:8085
      - Kafka__BootstrapServers=kafka:29092
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      kafka:
        condition: service_healthy
      subscriptions_presentation:
        condition: service_started
    networks:
      - dev
