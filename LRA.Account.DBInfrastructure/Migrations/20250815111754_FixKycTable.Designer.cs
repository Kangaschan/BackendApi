// <auto-generated />
using System;
using LRA.Account.DBInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LRA.Account.DBInfrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815111754_FixKycTable")]
    partial class FixKycTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountRoles", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountRoles");

                    b.HasData(
                        new
                        {
                            AccountsId = new Guid("cb67ce07-ad2c-4d16-9238-31c10b60306a"),
                            RolesId = new Guid("410434b8-9c7d-47be-a591-2bc1e6005d24")
                        });
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BlockedUntil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("KeycloakId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb67ce07-ad2c-4d16-9238-31c10b60306a"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            Email = "superadmin@mail.com",
                            IsBlocked = false,
                            IsDeleted = false,
                            IsTwoFactorEnabled = false,
                            KeycloakId = "f0b5af18-5352-4716-9ef4-c6654e5e7aeb",
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.CredentialsDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsTemporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("CredentialsDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4f7b2e2-7b8e-4b7b-8f1a-6e7c9d8e7f9a"),
                            AccountId = new Guid("cb67ce07-ad2c-4d16-9238-31c10b60306a"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            IsTemporary = false,
                            IsUsed = false,
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.EmailConfirmationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Token", "UserEmail")
                        .IsUnique();

                    b.ToTable("ConfirmationTokens");
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.KycEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("IdentityDocumentPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdentityDocumentSelfie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalCertificatePhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("AccountEntityId");

                    b.HasIndex("AccountId");

                    b.ToTable("Kycs");
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.OneTimePasswordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Password", "UserEmail")
                        .IsUnique();

                    b.ToTable("OneTinePasswords");
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("766745d4-137e-42d5-b8b5-73d039a91720"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            Name = "admin",
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("410434b8-9c7d-47be-a591-2bc1e6005d24"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            Name = "superAdmin",
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("85b823f0-4b6a-45fe-a44b-efd0df385ace"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            Name = "paramedic",
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d6a978a8-aa11-471c-be82-71ef221afdf0"),
                            CreatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc),
                            Name = "client",
                            UpdatedAtUtc = new DateTime(2023, 12, 25, 15, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AccountRoles", b =>
                {
                    b.HasOne("LRA.Account.Domain.Models.AccountEntity", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LRA.Account.Domain.Models.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.CredentialsDetailsEntity", b =>
                {
                    b.HasOne("LRA.Account.Domain.Models.AccountEntity", "Account")
                        .WithOne("Credentials")
                        .HasForeignKey("LRA.Account.Domain.Models.CredentialsDetailsEntity", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.KycEntity", b =>
                {
                    b.HasOne("LRA.Account.Domain.Models.AccountEntity", null)
                        .WithMany("Kycs")
                        .HasForeignKey("AccountEntityId");

                    b.HasOne("LRA.Account.Domain.Models.AccountEntity", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LRA.Account.Domain.Models.AccountEntity", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("Kycs");
                });
#pragma warning restore 612, 618
        }
    }
}
